#!/usr/bin/python
#
# mac_sshlisteners  Restrict SSH clients from listening on sockets.
#                   Supports IPv4 and IPv6.
#
# 10-Oct-2020   Billy Wilson    Created this.

from bcc import BPF
from bcc.utils import printb
import argparse
import datetime
import pwd
import socket
from socket import inet_ntop, AF_INET, AF_INET6
import struct


def parse_uid(user):
    """
    Check if valid UID or username is provided
    """
    try:
        result = int(user)
    except ValueError:
        try:
            user_info = pwd.getpwnam(user)
        except KeyError:
            raise argparse.ArgumentTypeError(
                "{0!r} is not valid UID or user entry".format(user))
        else:
            return user_info.pw_uid
    else:
        # Maybe validate if UID < 0 ?
        return result


def ip2long(ip):
    """
    Convert an IP string to a long
    """
    packedIP = socket.inet_aton(ip)
    return struct.unpack("!L", packedIP)[0]


def long2ip(num):
    """
    Convert a long to an IP string
    """
    return socket.inet_ntoa(struct.pack("!L", num))


# Set up argument parser
examples = """examples:
    ./mac_sshlisteners -A                 # Allow all SSH listeners
    ./mac_sshlisteners -A -u 1000         # Allow only UID 1000 to open SSH listeners
    ./mac_sshlisteners -D                 # Deny all SSH proxies
    ./mac_sshlisteners -D -u 1000         # Deny only UID 1000 from opening SSH listeners
"""

parser = argparse.ArgumentParser(
    description="Dynamically load a MAC policy for socket listen operations",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=examples)
mode = parser.add_mutually_exclusive_group(required=True)
mode.add_argument("-A", "--allow", action="store_true",
    help="define an allow policy")
mode.add_argument("-D", "--deny", action="store_true",
    help="define a deny policy")
user_control = parser.add_mutually_exclusive_group()
user_control.add_argument("-u", "--user", type=parse_uid, metavar="USER",
    help="apply the policy to a specific user")
user_control.add_argument("-U", "--exclude-user", type=parse_uid, metavar="EXCLUDED_USER",
    help="exclude a specific user from the policy")

args = parser.parse_args()


# BPF program (in C)
bpf_text = """
#include <net/sock.h>
#include <linux/inet.h>
#include <linux/errno.h>

#define __LOWER(x) (x & 0xffffffff)
#define __UPPER(x) (x >> 32)
#define __SWAP32(x) ((x >> 24) & 0xff) | \
                    ((x >> 8)  & 0xff00) | \
                    ((x << 8)  & 0xff0000) | \
                    ((x << 24) & 0xff000000)

/*
 * Create a data structure for collecting event data
 */
struct data_t {
    char comm[TASK_COMM_LEN];
    u32 uid;
    u32 gid;
    u32 pid;
    unsigned short family;
    u16 protocol;
    unsigned short lport;
    long laddr4;
    unsigned __int128 laddr6;
    int allowed;
};

/*
 * Create buffers for sending event data to userspace
 */
BPF_PERF_OUTPUT(events);

/*
 * Attach to the "socket_listen" LSM hook
 */
LSM_PROBE(socket_listen, struct socket *sock, int backlog) {

    u64 gid_uid;
    u64 pid_tgid;
    int allowed;
    struct inet_sock *sockp;

    struct data_t data = {};

    /*
     * Examine IPv4 and IPv6 socket listen operations
     */
    sockp = (struct inet_sock *)sock;
    data.family = sock->sk->sk_family;
    if (data.family == AF_INET ||
        data.family == AF_INET6) {

        /*
         * Gather event data
         */
        gid_uid = bpf_get_current_uid_gid();
        pid_tgid = bpf_get_current_pid_tgid();
        bpf_get_current_comm(&data.comm, sizeof(data.comm));
        data.uid = __LOWER(gid_uid);
        data.gid = __UPPER(gid_uid);
        data.pid = __UPPER(pid_tgid);
        data.protocol = sock->sk->sk_protocol;
        data.lport = sock->sk->sk_num;
        if (data.family == AF_INET)
            data.laddr4 = __SWAP32(sock->sk->sk_rcv_saddr);
        else if (data.family == AF_INET6)
            bpf_probe_read_kernel(&data.laddr6, sizeof(data.laddr6), sock->sk->sk_v6_rcv_saddr.in6_u.u6_addr32);

        /*
         * "ssh" comm filter and optional filters (Populated by Python script)
         */
        if (
        (__builtin_memcmp("ssh", data.comm, sizeof("ssh")) == 0)
        UID_FILTER
        ) {
            data.allowed = 0;
            events.perf_submit(ctx, &data, sizeof(data));
            return -EPERM;
        } else {
            data.allowed = 1;
            events.perf_submit(ctx, &data, sizeof(data));
        }
    }
    return 0;
}
"""


# Populate filters in the BPF program, basedon options passed to this script
if args.user:
    bpf_text = bpf_text.replace('UID_FILTER', '&& (data.uid ALLOW_OR_DENY %s)' % args.user)
elif args.exclude_user:
    bpf_text = bpf_text.replace('UID_FILTER', '&& (data.uid INVERSE %s)' % args.exclude_user)
else:
    bpf_text = bpf_text.replace('UID_FILTER', '')

if args.allow:
    bpf_text = bpf_text.replace('ALLOW_OR_DENY', '!=')
    bpf_text = bpf_text.replace('INVERSE', '==')
elif args.deny:
    bpf_text = bpf_text.replace('ALLOW_OR_DENY', '==')
    bpf_text = bpf_text.replace('INVERSE', '!=')


# Compile the BPF program and attach it to the LSM hook
b = BPF(text=bpf_text)


def print_event(cpu, data, size):
    """
    Print event data for an IPv4/IPv6 socket listen attempt.
    """
    event = b["events"].event(data)
    printb(b"%s type=listen comm=%s uid=%d gid=%d pid=%d proto=%d laddr=%s lport=%u action=%s" % (
        datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"),
        event.comm,
        event.uid,
        event.gid,
        event.pid, 
        event.protocol,
        long2ip(event.laddr4) if event.family == AF_INET else "[" + inet_ntop(AF_INET6, event.laddr6) + "]",
        event.lport,
        "allow" if event.allowed else "deny"))


# Setup callback function for the buffer
b["events"].open_perf_buffer(print_event)


# Poll for incoming events
while 1:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        exit()
